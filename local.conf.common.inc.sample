CONF_VERSION = "1"

### Host variables
#
# Determine how many tasks bitbake should run in parallel:
#
#BB_NUMBER_THREADS = "8"
#
# Determine how many processes make should run in parallel when running compile tasks:
#
#PARALLEL_MAKE = "-j 8"
# Note: For your decision you can get information about core and threads at your machine with this command:
#  ~ $  lscpu | grep -E '^Thread|^CPU\('

### Specifies the time (in seconds) after which to unload the BitBake server due to inactivity.
#   Set BB_SERVER_TIMEOUT to determine how long the BitBake server stays resident between invocations.
#
#BB_SERVER_TIMEOUT = "20"

### With rm_work enabled, this variable specifies that work directories should not be removed after build process.
#   If this variable is activated, the memory requirement is significantly reduced.
#   Defined exceptions are listed within variable RM_WORK_EXCLUDE.
#
INHERIT += "rm_work"
RM_WORK_EXCLUDE += "neutrino-image base-files"

### Prevent splitting out debug information during packaging
#   see: https://docs.yoctoproject.org/ref-manual/variables.html#term-INHIBIT_PACKAGE_DEBUG_SPLIT
#
#INHIBIT_PACKAGE_DEBUG_SPLIT = "1"

### Base directory of the OpenEmbedded build system used by build output and intermediate files (other than the shared state cache). By default, the TMPDIR variable points to tmp within the 
#   build directory.
#
#TMPDIR = "${TOPDIR}/tmp"

### General area of the OpenEmbedded build system used to place images, packages, SDKs, and other output files that are ready to be used outside of the build system. By default, this directory 
#   resides within the build directory as ${TMPDIR}/deploy.
#
#DEPLOY_DIR = "${TMPDIR}/deploy"

### base build and source directory
#
YOCTO_BASEDIR = "${COREBASE}"

### Source download storage location (read/write)
#
DL_DIR ?= "${COREBASE}/yocto-downloads"
#DL_DIR = "${HOME}/Archive"

### Directory for the shared state cache. By default, the SSTATE_DIR variable points to sstate-cache within the build directory as ${TOPDIR}/sstate-cache,
# but it's a good idea to place it into your user directory, so that this folder is always available in case the build folder should be deleted anyway.
#
#SSTATE_DIR = "${TOPDIR}/sstate-cache"
SSTATE_DIR = "${HOME}/sstate-cache"

### Share ccache files between different builds
#   Set CCACHE_TOP_DIR to a shared dir
#   CCACHE_TOP_DIR = /path/to/shared_ccache/
#CCACHE_TOP_DIR = "${TMPDIR}/ccache"
# recommended:
CCACHE_TOP_DIR = "${HOME}/.ccache"

### sdk options
#
#SDKMACHINE ?= "i686"
SDKMACHINE = "x86_64"
#SDKIMAGE_FEATURES="dev-pkgs dbg-pkgs src-pkgs "

### time zone
#
DEFAULT_TIMEZONE = "Europe/Berlin"

### Disk Space Monitoring during the build. Default disabled, but it's a good Idea to enable.
#   see: https://www.yoctoproject.org/docs/current/ref-manual/ref-manual.html#var-BB_DISKMON_DIRS
#
BB_DISKMON_DIRS = "\
    STOPTASKS,${TMPDIR},1G,100K \
    STOPTASKS,${DL_DIR},1G,100K \
    STOPTASKS,${SSTATE_DIR},500M,100K \
    ABORT,${TMPDIR},100M,1K \
    ABORT,${DL_DIR},100M,1K \
    ABORT,${SSTATE_DIR},100M,1K \
" 

### Hash Equivalence
#
# Enable support for automatically running a local hash equivalence server and
# instruct bitbake to use a hash equivalence aware signature generator. Hash
# equivalence improves reuse of sstate by detecting when a given sstate
# artifact can be reused as equivalent, even if the current task hash doesn't
# match the one that generated the artifact.
#
# A shared hash equivalent server can be set with "<HOSTNAME>:<PORT>" format+#
#
BB_HASHSERVE = "auto"
BB_SIGNATURE_HANDLER = "OEEquivHash"
#
# https://docs.yoctoproject.org/ref-manual/variables.html#term-BB_DANGLINGAPPENDS_WARNONLY
BB_DANGLINGAPPENDS_WARNONLY = "1"

### Qemu configuration
#
PACKAGECONFIG_pn-qemu-native = "sdl"

### Image settings
# Image size:
# possible are "small" or "normal" (normal means the same like empty string)
#
#IMAGESIZE = "normal"
#IMAGESIZE = "small"
#
# Which neutrino source will be used:
# Choose neutrino source. Possible values are "tuxbox", "tango" or "ni"
# Note: Successful build of foreign neutrino source is not guaranteed.
# Don't remove from local.conf
#
FLAVOUR = "tuxbox"
#

### Set DISTRO
# don't remove, it's required
#
DISTRO = "tuxbox"

### Distro codename
#
#DISTRO_CODENAME = ""

### Image filename arranging
# set a distro name if required
#
#DISTRO_NAME = "${DISTRO}"

### General image name
#
#IMAGE_BASENAME = "${DISTRO_NAME}"
# proposed:
#
IMAGE_BASENAME = "my-image"

### Distro version
#
#DISTRO_VERSION = "${DISTRO_BUILD_VERSION}"
#DISTRO_VERSION = "22.5.0"

### Release type string
#  Possible types are beta, release, nightly, all others means what ever you want
#
#DISTRO_TYPE = "beta"

### IMAGE_NAME_SUFFIXES:
#
#IMAGE_VERSION_SUFFIX="-${DATE}"
### proposed:
#IMAGE_VERSION_SUFFIX="-${DISTRO_TYPE}"
#IMAGE_VERSION_SUFFIX="-${DATE}-${DISTRO_TYPE}"
#IMAGE_VERSION_SUFFIX="-${PR}"
#IMAGE_VERSION_SUFFIX="-${PR}-${DISTRO_TYPE}"
#IMAGE_VERSION_SUFFIX="-${PR}.${DATE}"
#IMAGE_VERSION_SUFFIX="-${PR}.${DATE}-${DISTRO_TYPE}"

### Complete image name
#
#IMAGE_NAME = "${IMAGE_BASENAME}-${MACHINE_BRAND}-${MACHINE_NAME}-${DISTRO_VERSION}${IMAGE_VERSION_SUFFIX}"

### Default image root password
# set initial password for user root. Keep empty for root:
#
ROOTPW = ""

### Add Image Maintainer and host build machine here
#
# CREATOR = "${USER}"
# KBUILD_BUILD_USER = "${CREATOR}"
KBUILD_BUILD_HOST = "127.0.0.1"

### Git configuration on target machine ... needed by etckeeper
#
GIT_USER = "root"
MAIL = "root@${MACHINE}"

### dev keys for neutrino gui and weather plugin
# NOTE: Here you see empty entries! NOT WORKING! Own keys are required!
# You can also include a file eg. named "local.conf.devkeys.inc"
# Modify and add these line:
# include /<path>/<to>/local.conf.devkeys.inc
#
# NOTE: Beginning on March 31st, 2023 the Dark Sky API will not longer be available.
# WeatherKit, a new Apple API available on iOS, iPadOS, macOS, tvOS, 
# and web that provides access to the new Apple Weather forecast data.
# The WEATHER_DEV_KEY variable is not longer used for darksky keys
# Currently used provider is: openweather map
WEATHER_DEV_KEY = ""
# YouTube, TMDB, OMDB, ShoutCast
YT_DEV_KEY = ""
TMDB_DEV_KEY = ""
SHOUTCAST_DEV_KEY = ""
OMDB_API_KEY = ""

### Extra build config options for neutrino build
#   e.g: to enable the neutrino test menu
#   NOTE! Works only with FLAVOUR = "tuxbox"
#   Keep this entry disabled, if you want to use an other FLAVOUR than "tuxbox".
#   and add these lines into your local.conf within your build directory
# EXTRA_OECONF_append_pn-neutrino-mp += " \
# 	--enable-testing \
# "

### Extra build config options for gdb build
#
#EXTRA_OECONF_append_pn-gdb = "--with-system-gdbinit=/etc/gdbinit"

### Experimental kodi, qtwebflix
#   NOTE: will build only with gatesgarth/3.2.4
#   It's not guaranteed, that build will be successfully.
#   Tipp: Alternatively, you can add targets to EXTRA IMAGE DEPENDS or IMAGE_INSTALL.
#
#DEPENDS_pn-neutrino-image += "kodi qtwebflix"

### Package feed configuration
#
PACKAGE_CLASSES = "package_ipk"
# Prevents splitting out debug information during packaging.
#INHIBIT_PACKAGE_DEBUG_SPLIT = "1"
#
### Update feeds
# Web server from which packages and images are updated. Points as default to www directory of the host
# URL-template (only local in this config file)
# for usage of these url's you should make a symlink as super user to the image and package directories
#
#UPDATE_SERVER_URL = "http://${KBUILD_BUILD_HOST}"
#UPDATE_SERVER_URL = "http://<hostname>"
#UPDATE_SERVER_URL = "http://localhost"
UPDATE_SERVER_URL = "file:///var/www/html"
#UPDATE_SERVER_URL = "https://n4k.sourceforge.io"
#UPDATE_SERVER_URL = "http://n4k.sourceforge.io"
#
# If local feed with Tuxbox-Builder VM is available:
#UPDATE_SERVER_URL = "http://<Tuxbox-Builder IP or HOSTNAME>"

### Package manager configuration
#
DISTRO_FEED_VERSION = "${DISTRO_VERSION_NUMBER_MAJOR}.${DISTRO_VERSION_NUMBER_MINOR}"
#DISTRO_FEED_VERSION = "${DISTRO_VERSION_NUMBER}"
#
#IPK_FEED_SERVER = "file:///media/sda1/service/ipk"
# If local feed at Tuxbox-Builder VM is in use (see above):
IPK_FEED_SERVER = "${UPDATE_SERVER_URL}/dist/${DISTRO_FEED_VERSION}/${MACHINE}/ipk"

### Image update configuration
#
IMAGE_LOCATION = "${UPDATE_SERVER_URL}/dist/${DISTRO_FEED_VERSION}/${MACHINE}/images"

# RELEASE_TEXT_LOCATION = "file:///media/sda1/service/image/imageversion"
RELEASE_TEXT_LOCATION_HOST = "${DEPLOY_DIR_IMAGE}/${DISTRO_TYPE}.txt"
RELEASE_TEXT_LOCATION = "${UPDATE_SERVER_URL}/dist/${DISTRO_FEED_VERSION}/${MACHINE}/images/${DISTRO_TYPE}.txt"

### Add additional lines for /etc/os-release and .version contents 
#
#HOME_URL = "https://github.com/tuxbox-neutrino"
#SUPPORT_URL = "https://wiki.tuxbox-neutrino.org"
#BUG_REPORT_URL = "https://forum.tuxbox-neutrino.org"

### URLs for download mirrors from Yocto 
#
# global archive and source urls
ARCHIVE_SOURCE_URL = "https://n4k.sourceforge.io/sources"
YOCTO_SOURCE_URL = "http://www.yoctoproject.org/sources"

PREMIRRORS_prepend = "\
     https://.*/.* ${ARCHIVE_SOURCE_URL}/ \n \
     git://.*/.* ${YOCTO_SOURCE_URL}/ \n \
     ftp://.*/.* ${YOCTO_SOURCE_URL}/ \n \
     http://.*/.* ${YOCTO_SOURCE_URL}/ \n \
     https://.*/.* ${YOCTO_SOURCE_URL}/ \n \
"
### Download mirrors from Local file mirrors (read only)
#
# PREMIRRORS_prepend = "\
#     file://.*/.*     file://${HOME}/Downloads/* \n \
# "

### Source mirror urls
#    see: https://wiki.yoctoproject.org/wiki/How_do_I#Q:_How_do_I_create_my_own_source_download_mirror_.3F
#
#    This is our own stock of archives, those are created by our image builds.
SOURCE_MIRROR_URL = "${ARCHIVE_SOURCE_URL}"
INHERIT += "own-mirrors" 
BB_GENERATE_MIRROR_TARBALLS = "0" 
#BB_NO_NETWORK = "1"

### Tipp: use sstate mirrors
#
# Speed up your complete new package build or after deleted tmp dir or sstate-cache and guard against fetcher failures.
# Official mirrors to find here: http://sstate.yoctoproject.org/
# Ensure you have a fast internet. After 1st build you can disable this
# SSTATE_MIRRORS += "\
#     file://.* http://sstate.yoctoproject.org/dev/PATH;downloadfilename=PATH \n \
#     file://.* http://sstate.yoctoproject.org/2.7.3/PATH;downloadfilename=PATH \n \
#     file://.* http://sstate.yoctoproject.org/3.0.3/PATH;downloadfilename=PATH \n \
#     file://.* http://sstate.yoctoproject.org/3.1/PATH;downloadfilename=PATH \n \
#     file://.* http://sstate.yoctoproject.org/3.1.1/PATH;downloadfilename=PATH \n \
#     file://.* http://sstate.yoctoproject.org/3.1.2/PATH;downloadfilename=PATH \n \
#     file://.* http://sstate.yoctoproject.org/3.2/PATH;downloadfilename=PATH \n \
#     file://.* http://sstate.yoctoproject.org/3.2.4/PATH;downloadfilename=PATH \n \
# "
SSTATE_MIRRORS += "\
    file://.* http://sstate.yoctoproject.org/${DISTRO_VERSION}/PATH;downloadfilename=PATH \n \
"
# This is our own stock of sstate cache related of last tuxbox builds.
SSTATE_MIRRORS += "\
    file://.* https://n4k.sourceforge.io/sstate-cache/3.2/sstate-cache/PATH;downloadfilename=PATH \n \
    file://.* https://n4k.sourceforge.io/sstate-cache/devel/sstate-cache/PATH;downloadfilename=PATH \n \
"

# If you are using the TuxboxBuilder VM and it's running, you can use its sstate cache related of last builds.
# Note: www server of Tuxbox-Builder VM must be enabled and configured so that it can be reached. 
# If required, replace the server url with your own server url
#
#SSTATE_MIRRORS += "\
#     file://.* http://tuxbox-builder/sstate-cache/PATH;downloadfilename=PATH \n \
#"
## Sample for usage your own local sstate mirror (read only)
#
# SSTATE_MIRRORS += "\
#       file://.* file:///${HOME}/sstate-cache/PATH;downloadfilename=PATH \n \
# "

### Masked recipes
#
# This will ignore recipes to build.
# NOTE: Some masked targets with related depends could break the build.
# BBMASK += "/meta-neutrino/recipes-qt/qt5"

### Build packages but do not install packages into image
# https://www.yoctoproject.org/docs/current/mega-manual/mega-manual.html#var-EXTRA_IMAGEDEPENDS
#
# EXTRA_IMAGEDEPENDS += " \
# 			gdb \
# 			samba \
# 			vsftpd \
# "
# EXTRA_IMAGEDEPENDS += " \
# 			kodi \
# "

### Put additional packages that should be packaged into your image. Separated with a whitespace. or use IMAGE_INSTALL += ...

# https://www.yoctoproject.org/docs/current/ref-manual/ref-manual.html#var-IMAGE_INSTALL
# See: ./meta-neutrino/recipes-images/images/neutrino-image-base.inc.
#
IMAGE_INSTALL += " \
	stb-flash \
	msgbox \
	shellexec \
	tuxcom \
	input \
"
#IMAGE_INSTALL += " \
# 	webmin \
#"
# IMAGE_INSTALL += " \
#	neutrino-3rd-party-themes \
#"
#
# IMAGE_INSTALL += " qtwebflix"
# IMAGE_INSTALL += " gdb-dbg glibc-dbg glibc-thread-db"


# If you want to remove already contained packages from IMAGE_INSTALL use this:
# IMAGE_INSTALL_remove += " \
# 	<target1> \
# 	<target2> \
# "

### To build packages without install into image use PACKAGE_EXCLUDE
# see: https://www.yoctoproject.org/docs/current/ref-manual/ref-manual.html#var-PACKAGE_EXCLUDE
# PACKAGE_EXCLUDE += \
#	<package1> \
#	<package2> \
#"

### Example to replace a source url via local.conf
#
# SRC_URI_pn-x264 = "git://code.videolan.org/videolan/x264;branch=stable;protocol=https \
# "

### base-files rewrite
#
#LICENSE_pn-base-files = "CLOSED"
#LIC_FILES_CHKSUM_pn-base-files = ""
#BBMASK += "/meta-neutrino/recipes-images/base-files/base-files_%.bbappend"
#FILESEXTRAPATHS_prepend := "/home/tg/devel/local-yocto-files/base-files:"

### Enabling and Disabling Build History
#   see> https://docs.yoctoproject.org/singleindex.html#enabling-and-disabling-build-history
#INHERIT += "buildhistory"
#BUILDHISTORY_COMMIT = "1"

### Replace some lame fetch urls
#
#BINUTILS_GIT_URI = "git://github.com/bminor/binutils-gdb.git;branch=${BRANCH};protocol=https"
#GLIBC_GIT_URI = "git://github.com/bminor/glibc.git;branch=release/2.32/master;name=glibc"
